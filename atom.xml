<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IT痴者</title>
  
  <subtitle>前进是我活着的唯一理由</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wxfjava.com/"/>
  <updated>2020-05-09T17:11:02.450Z</updated>
  <id>http://www.wxfjava.com/</id>
  
  <author>
    <name>IT痴者</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《uiautomator---解决找不到控件问题》---部分</title>
    <link href="http://www.wxfjava.com/2020/04/15/2020/uiautomator_uinotfound/"/>
    <id>http://www.wxfjava.com/2020/04/15/2020/uiautomator_uinotfound/</id>
    <published>2020-04-15T07:02:01.000Z</published>
    <updated>2020-05-09T17:11:02.450Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/w695050167/article/details/105535542" target="_blank" rel="noopener">原文地址</a></p><p>手动将文件导出，添加到软件中进行查看。<br><a id="more"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">builddate=`date <span class="string">'+%Y%m%d%H%M'</span>`</span><br><span class="line"></span><br><span class="line">adb shell uiautomator dump /sdcard/app.uix</span><br><span class="line">adb pull /sdcard/app.uix ./app<span class="variable">$&#123;builddate&#125;</span>.uix</span><br><span class="line"><span class="comment">#存到E盘的app.uix文件中，在E盘新建一个文本文档改成app.uix</span></span><br><span class="line">adb shell screencap -p /sdcard/app.png</span><br><span class="line">adb pull /sdcard/app.png ./app<span class="variable">$&#123;builddate&#125;</span>.png</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/w695050167/article/details/105535542&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;手动将文件导出，添加到软件中进行查看。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
      <category term="自动化" scheme="http://www.wxfjava.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>《Android---热修复简单探讨（一）》------dex类加载方式</title>
    <link href="http://www.wxfjava.com/2020/04/14/2020/hot_fix/"/>
    <id>http://www.wxfjava.com/2020/04/14/2020/hot_fix/</id>
    <published>2020-04-14T09:40:59.000Z</published>
    <updated>2020-05-09T17:11:02.450Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/w695050167/article/details/105414840" target="_blank" rel="noopener">原文地址</a></p><h2 id="Android-Class加载机制"><a href="#Android-Class加载机制" class="headerlink" title="Android Class加载机制"></a>Android Class加载机制</h2><p>使用该种方式实现就是要了解Android class的加载机制。然后利用反射进行hook。<br><img src="https://img-blog.csdnimg.cn/2020040917324338.png" alt="在这里插入图片描述"><br>通过类关系可以看出主要有，<kbd>PathClassLoader</kbd>，<kbd>DexClassLoader</kbd>两个loader。<br><a id="more"></a></p><ul><li>PathClassLoader：主要用于加载/data/app/中的apk</li><li>DexClassLoader：可以加载指定路径的apk,dex,jar<br>从源码可以看出主要功能实现还是在BaseDexClassLoader中</li></ul><p>BaseDexClassLoader中查找class方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</span><br><span class="line"> ...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">     List&lt;Throwable&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;Throwable&gt;();</span><br><span class="line">     <span class="comment">// 该方法又调用了DexPathList中的方法</span></span><br><span class="line">     Class c = pathList.findClass(name, suppressedExceptions);</span><br><span class="line">     <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">         ClassNotFoundException cnfe = <span class="keyword">new</span> ClassNotFoundException(<span class="string">"Didn't find class \""</span> + name + <span class="string">"\" on path: "</span> + pathList);</span><br><span class="line">         <span class="keyword">for</span> (Throwable t : suppressedExceptions) &#123;</span><br><span class="line">             cnfe.addSuppressed(t);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">throw</span> cnfe;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> c;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>DexPathList中查找class的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Element[] dexElements;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name, List&lt;Throwable&gt; suppressed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Element element : dexElements) &#123;</span><br><span class="line">        DexFile dex = element.dexFile;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果找到目标class就不会执行后面的把我们要修改的class放到前面即可完成替换</span></span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dexElementsSuppressedExceptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">        suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Element则主要保存dex有关的信息，可以看看系统给我们的对象里面都有哪些信息，对照着创建一个就好了。</p><h2 id="实验查看数据"><a href="#实验查看数据" class="headerlink" title="实验查看数据"></a>实验查看数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">   ClassLoader classLoader = getClassLoader();</span><br><span class="line">    L.i(classLoader.getClass().getSimpleName());</span><br><span class="line"></span><br><span class="line">    Object pathList = ReflexUtils.getProperty(classLoader, <span class="string">"pathList"</span>);</span><br><span class="line">    L.i(pathList.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">04</span>-<span class="number">09</span> <span class="number">18</span>:<span class="number">34</span>:<span class="number">13.900</span> I/[TS-FH]: [ onCreate ]PathClassLoader(MainActivity.java:<span class="number">18</span>)</span><br><span class="line"><span class="number">04</span>-<span class="number">09</span> <span class="number">18</span>:<span class="number">34</span>:<span class="number">13.901</span> I/[TS-FH]: [ onCreate ]DexPathList[[zip file <span class="string">"/data/app/com.wxfjava.struggle-1/base.apk"</span>],nativeLibraryDirectories=[/vendor/lib, /system/lib]](MainActivity.java:<span class="number">22</span>)</span><br></pre></td></tr></table></figure><h2 id="打修复包"><a href="#打修复包" class="headerlink" title="打修复包"></a>打修复包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --output=f.dex输出文件名称 源class，就目录下所有class文件打包</span></span><br><span class="line">dx --dex --output=f.dex **/*.class</span><br></pre></td></tr></table></figure><h2 id="Android中目录说明"><a href="#Android中目录说明" class="headerlink" title="Android中目录说明"></a>Android中目录说明</h2><ul><li><kbd>/system/app/</kbd>系统自带应用存储位置</li><li><kbd>/data/app/</kbd>用户应用目录</li><li><kbd>/data/data/</kbd>应用数据存储目录</li><li><kbd>/data/dalvik-cache/</kbd>dex文件存储位置</li></ul><p>应用安装：将apk复制到/data/app/下，dex文件放到/data/dalvik-cache/目录，并在数据目录创建对应的数据信息。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 将修复dex复制到工作目录下</span></span><br><span class="line">      File srcFile = <span class="keyword">new</span> File(FIX_DEX_FILE);</span><br><span class="line">      File dexFile = <span class="keyword">new</span> File(dexPath.getAbsolutePath(), srcFile.getName());</span><br><span class="line">      FileUtils.copyFile(srcFile, dexFile);</span><br><span class="line"></span><br><span class="line">      ClassLoader pathClassLoader = mContext.getClassLoader();</span><br><span class="line">      Object pathList = ReflexUtils.getProperty(pathClassLoader, <span class="string">"pathList"</span>);</span><br><span class="line">      Object dexElements = ReflexUtils.getProperty(pathList, <span class="string">"dexElements"</span>);</span><br><span class="line">      <span class="keyword">int</span> length = Array.getLength(dexElements);</span><br><span class="line"></span><br><span class="line">      DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(dexFile.getAbsolutePath(), foptPath, <span class="keyword">null</span>, pathClassLoader);</span><br><span class="line">      Object fixPathList = ReflexUtils.getProperty(dexClassLoader, <span class="string">"pathList"</span>);</span><br><span class="line">      Object fixDexElements = ReflexUtils.getProperty(fixPathList, <span class="string">"dexElements"</span>);</span><br><span class="line">      <span class="keyword">int</span> fixLength = Array.getLength(fixDexElements);</span><br><span class="line"></span><br><span class="line">      Object newDexElements = Array.newInstance(Array.get(dexElements, <span class="number">0</span>).getClass(), length + fixLength);</span><br><span class="line">      System.arraycopy(fixDexElements, <span class="number">0</span>, newDexElements, <span class="number">0</span>, fixLength);</span><br><span class="line">      L.i(<span class="string">"l:"</span> + length + <span class="string">",fixl:"</span> + fixLength);</span><br><span class="line">      System.arraycopy(dexElements, <span class="number">0</span>, newDexElements, fixLength, length);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">boolean</span> result = ReflexUtils.setProperty(pathList, <span class="string">"dexElements"</span>, newDexElements);</span><br><span class="line">      L.i(result + <span class="string">"-"</span> + pathList.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      L.e(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这种方式只能在有问题的class加载之前进行替换修复才会有效。如果已经加载了有问题的class，进行替换是无效的，所以修复的代码要放到Application中进行执行。<br>要实现实时修复，就要用到Andfix的实现方式了。直接修改问题方法的内存地址指向完成实时修复。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/w695050167/article/details/105414840&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Android-Class加载机制&quot;&gt;&lt;a href=&quot;#Android-Class加载机制&quot; class=&quot;headerlink&quot; title=&quot;Android Class加载机制&quot;&gt;&lt;/a&gt;Android Class加载机制&lt;/h2&gt;&lt;p&gt;使用该种方式实现就是要了解Android class的加载机制。然后利用反射进行hook。&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020040917324338.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;通过类关系可以看出主要有，&lt;kbd&gt;PathClassLoader&lt;/kbd&gt;，&lt;kbd&gt;DexClassLoader&lt;/kbd&gt;两个loader。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
      <category term="热修复" scheme="http://www.wxfjava.com/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>《Android---repo sync失败重试脚本》</title>
    <link href="http://www.wxfjava.com/2020/04/02/2020/android_repo_retry/"/>
    <id>http://www.wxfjava.com/2020/04/02/2020/android_repo_retry/</id>
    <published>2020-04-02T06:12:12.000Z</published>
    <updated>2020-05-09T17:11:02.450Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/w695050167/article/details/105268850" target="_blank" rel="noopener">原文地址</a></p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[start]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#repo sync -j4</span></span><br><span class="line">repo sync --current-branch</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ $? -ne 0 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[retry]"</span></span><br><span class="line">sleep 1</span><br><span class="line">repo sync --current-branch</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/w695050167/article/details/105268850&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
      <category term="源码" scheme="http://www.wxfjava.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>《Android---AndroidStudio项目添加NDK支持》---环境搭建过程并编写测试程序</title>
    <link href="http://www.wxfjava.com/2020/03/29/2020/android_ndk/"/>
    <id>http://www.wxfjava.com/2020/03/29/2020/android_ndk/</id>
    <published>2020-03-28T16:14:18.000Z</published>
    <updated>2020-05-09T17:11:02.440Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/w695050167/article/details/105166292" target="_blank" rel="noopener">原文地址</a></p><h2 id="下载NDK开发工具"><a href="#下载NDK开发工具" class="headerlink" title="下载NDK开发工具"></a>下载NDK开发工具</h2><p>个人习惯开发工具单独下载，并配置环境变量。因为可能会有版本兼容等问题。如果你不想的话，可以直接在AndroidStudio中进行下载。<br><img src="https://img-blog.csdnimg.cn/20200328185016645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=,size_36,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我的话只下载这两个，偷懒的可以把NDK也勾选上。<br><a id="more"></a></p><blockquote><p>LLDB：Low Level Debugger 调试工具<br>CMake：跨平台的自动化构建系统</p></blockquote><p>现在都不用Android.mk进行构建了。</p><p><a href="https://developer.android.google.cn/ndk/downloads/" target="_blank" rel="noopener">NDK下载</a></p><ul><li>将下载好的ndk包进行解压，放置到自己的存放目录</li><li>配置环境变量，并在AndroidStudio配置对应目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NDK_HOME=/Users/&#123;username&#125;/xxx/xxx/android-ndk-r21</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;NDK_HOME&#125;</span></span><br></pre></td></tr></table></figure><p>使用以下命令使我们的配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>用<em>ndk-build</em>命令测试是否配置成功<br><img src="https://img-blog.csdnimg.cn/20200328190942235.png" alt="在这里插入图片描述"><br><strong>AndroidStudio中配置NDK</strong></p><p><img src="https://img-blog.csdnimg.cn/20200328191951440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=,size_36,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>并在根目录下的gradle.properties中添加<em>android.useDeprecatedNdk=true</em></p><p><strong>创建JNI目录，及so库文件生成的目录并在AndroidStudio中进行配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        ndk&#123;</span><br><span class="line">        <span class="comment">// 模块名称，既生成的so的名称</span></span><br><span class="line">            moduleName = <span class="string">"fh"</span></span><br><span class="line">            <span class="comment">// 支持的cpu架构</span></span><br><span class="line">            abiFilters(<span class="string">"armeabi-v7a"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">        <span class="comment">// 源文件目录</span></span><br><span class="line">            jni.srcDirs = [<span class="string">'src/main/cpp'</span>]</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'src/main/cpp/libs'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">        <span class="comment">// cmake配置文件位置</span></span><br><span class="line">            path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">   ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建对应的配置文件及源文件"><a href="#创建对应的配置文件及源文件" class="headerlink" title="创建对应的配置文件及源文件"></a>创建对应的配置文件及源文件</h2><p>在配置文件位置创建cmake配置文件<em>CMakeLists.txt</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake最小支持版本</span></span><br><span class="line">cmake_minimum_required(VERSION 3.4.1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个全局变量</span></span><br><span class="line">file(GLOB <span class="built_in">source</span> src/main/cpp/*.c src/main/cpp/*.cpp)</span><br><span class="line">add_library(</span><br><span class="line">        <span class="comment"># 库名称</span></span><br><span class="line">        fh</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 库类型 SHARED：动态库，STATIC：静态库</span></span><br><span class="line">        SHARED</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 源文件</span></span><br><span class="line">        <span class="variable">$&#123;source&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入头文件的目录</span></span><br><span class="line">include_directories(src/main/cpp/include/)</span><br><span class="line"></span><br><span class="line">find_library(</span><br><span class="line">        <span class="built_in">log</span>-lib</span><br><span class="line">        <span class="built_in">log</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接 fh：目标库 后面的是需要依赖的库</span></span><br><span class="line">target_link_libraries(</span><br><span class="line">        fh</span><br><span class="line">        <span class="variable">$&#123;log-lib&#125;</span>)</span><br></pre></td></tr></table></figure><p>在app/src/main/cpp下创建一个fh.cpp文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...)  __android_log_print(ANDROID_LOG_INFO, <span class="meta-string">"FH-LOG"</span>, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_wxfjava_struggle_MainActivity_hello(JNIEnv *env, jobject thiz, jstring name) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *cname = (<span class="keyword">char</span> *) env-&gt;GetStringUTFChars(name, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span> result[<span class="number">50</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">"Hello %s,I am JNI."</span>, cname);</span><br><span class="line">    LOGI(<span class="string">"获得android参数：%s"</span>, cname);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(name, cname);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java中的部分代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TextView tvInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.loadLibrary(<span class="string">"fh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    tvInfo = findViewById(R.id.tv_info);</span><br><span class="line">    tvInfo.setText(hello(<span class="string">"Android"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">native</span> String <span class="title">hello</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="https://img-blog.csdnimg.cn/20200329000506734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=,size_26,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><em>CMake配置文件高亮插件</em><br><img src="https://img-blog.csdnimg.cn/20200329000615780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=,size_20,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="使用AndroidStudio创建NDK项目"><a href="#使用AndroidStudio创建NDK项目" class="headerlink" title="使用AndroidStudio创建NDK项目"></a>使用AndroidStudio创建NDK项目</h2><p>这个就比较简单了，直接往下拉找到如下图，开始创建就好了。<br><em>老版貌似是勾选☑️Support C++</em><br><img src="https://img-blog.csdnimg.cn/20200329001019968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=,size_36,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/w695050167/article/details/105166292&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;下载NDK开发工具&quot;&gt;&lt;a href=&quot;#下载NDK开发工具&quot; class=&quot;headerlink&quot; title=&quot;下载NDK开发工具&quot;&gt;&lt;/a&gt;下载NDK开发工具&lt;/h2&gt;&lt;p&gt;个人习惯开发工具单独下载，并配置环境变量。因为可能会有版本兼容等问题。如果你不想的话，可以直接在AndroidStudio中进行下载。&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200328185016645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=,size_36,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;我的话只下载这两个，偷懒的可以把NDK也勾选上。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
      <category term="NDK" scheme="http://www.wxfjava.com/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>《Android---简单的自定义加载控件及Xfermode的使用》</title>
    <link href="http://www.wxfjava.com/2020/03/20/2020/xfermode_test/"/>
    <id>http://www.wxfjava.com/2020/03/20/2020/xfermode_test/</id>
    <published>2020-03-20T11:27:55.000Z</published>
    <updated>2020-05-09T17:11:02.460Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/w695050167/article/details/104996639" target="_blank" rel="noopener">原文地址</a></p><a id="more"></a><h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = getMeasuredWidth();</span><br><span class="line">        <span class="keyword">int</span> height = getMeasuredHeight();</span><br><span class="line">        mCenterX = width / <span class="number">2</span>;</span><br><span class="line">        mCenterY = height / <span class="number">2</span>;</span><br><span class="line">        mRadius = Math.min(width / <span class="number">2</span>, height) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        mCircle1 = <span class="keyword">new</span> PointF(mCenterX - mRadius, mCenterY);</span><br><span class="line">        mCircle2 = <span class="keyword">new</span> PointF(mCenterX + mRadius, mCenterY);</span><br><span class="line"></span><br><span class="line">        ValueAnimator animator = ValueAnimator.ofFloat(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        animator.setDuration(<span class="number">2000</span>);</span><br><span class="line">        animator.setRepeatMode(ValueAnimator.RESTART);</span><br><span class="line">        animator.setRepeatCount(ValueAnimator.INFINITE);</span><br><span class="line">        animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">                mAnimatorValue = (<span class="keyword">float</span>) animation.getAnimatedValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//        animator.setInterpolator(new AccelerateDecelerateInterpolator());</span></span><br><span class="line">        animator.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        canvas.saveLayer(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight(), mPaint, Canvas.ALL_SAVE_FLAG);</span><br><span class="line">        <span class="keyword">boolean</span> isBack = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">float</span> tmpValue = mAnimatorValue;</span><br><span class="line">        <span class="keyword">if</span> (tmpValue &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            tmpValue = <span class="number">4</span> - mAnimatorValue;</span><br><span class="line">            isBack = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> value = tmpValue;</span><br><span class="line">        <span class="keyword">if</span> (tmpValue &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            value = <span class="number">2</span> - tmpValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> color1 = mColor1;</span><br><span class="line">        <span class="keyword">int</span> color2 = mColor2;</span><br><span class="line">        <span class="keyword">float</span> radius = mRadius - (mRadius / <span class="number">3</span> * value);</span><br><span class="line">        mPaint.setColor(color1);</span><br><span class="line">        canvas.drawCircle(mCircle1.x + (mRadius * tmpValue), mCircle1.y, radius, mPaint);</span><br><span class="line">        <span class="keyword">if</span> (isBack) &#123;</span><br><span class="line">            mPaint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_OVER));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mPaint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.DST_OVER));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mPaint.setColor(color2);</span><br><span class="line">        canvas.drawCircle(mCircle2.x - (mRadius * tmpValue), mCircle2.y, radius, mPaint);</span><br><span class="line">        mPaint.setXfermode(<span class="keyword">null</span>);</span><br><span class="line">        postInvalidateDelayed(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://img-blog.csdnimg.cn/20200320191349764.gif" alt="在这里插入图片描述"></p><h2 id="关于Xfermode简单记录"><a href="#关于Xfermode简单记录" class="headerlink" title="关于Xfermode简单记录"></a>关于Xfermode简单记录</h2><p><strong>模式</strong><br><img src="https://img-blog.csdnimg.cn/20200320192159785.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>主要应用案例</strong></p><ul><li>不规则图片截取，圆形头像</li><li>橡皮擦，刮刮卡</li></ul><p><a href="https://github.com/wxfjava/Struggle/blob/master/app/src/main/java/com/wxfjava/struggle/view/load/CircularLoadingView.java" target="_blank" rel="noopener">源码地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/w695050167/article/details/104996639&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android-网易mumu模拟器adb连接失败的问题》</title>
    <link href="http://www.wxfjava.com/2020/03/20/2020/mumu_bug/"/>
    <id>http://www.wxfjava.com/2020/03/20/2020/mumu_bug/</id>
    <published>2020-03-20T10:52:01.000Z</published>
    <updated>2020-05-09T17:11:02.450Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/w695050167/article/details/104996398" target="_blank" rel="noopener">原文地址</a></p><p>网易mumu启用的端口跟其他模拟器的不一样，可使用以下命令去连接网易模拟器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb connect 127.0.0.1:22471</span><br><span class="line">adb devices</span><br></pre></td></tr></table></figure><a id="more"></a><p>若出现设备离线的情况，重启adb服务即可，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="built_in">kill</span>-server</span><br><span class="line">adb start-server</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/w695050167/article/details/104996398&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网易mumu启用的端口跟其他模拟器的不一样，可使用以下命令去连接网易模拟器。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;adb connect 127.0.0.1:22471&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb devices&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android---贝塞尔曲线应用-QQ消息气泡效果（一）》</title>
    <link href="http://www.wxfjava.com/2020/02/19/2020/qq_quad/"/>
    <id>http://www.wxfjava.com/2020/02/19/2020/qq_quad/</id>
    <published>2020-02-19T06:50:05.000Z</published>
    <updated>2020-05-09T17:11:02.450Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/w695050167/article/details/104392108" target="_blank" rel="noopener">原文地址</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很久之前就看到过实现原理了，就是没有动手去实现一下。最近又看到了贝塞尔曲线相关的文章，于是决定着手写一个小demo。有什么不完善的地方，欢迎大家指正。谢谢！<br><a id="more"></a></p><h2 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h2><p>关于贝塞尔曲线的文章，相信网上有很多。我就不详细描述了。</p><p><em>二阶贝塞尔曲线公式</em><br>B（t）=（1 - t）²Po + 2t（1 - t）P1 + t²P2，t∈[0，1]<br>可转换为<br>B（t）= （1-t）[（1-t）Po + tP1] + t[（1-t）P1 + tP2]</p><p><em>二阶贝塞尔曲线示例图</em><br><img src="https://img-blog.csdnimg.cn/20200219140017671.gif" alt="在这里插入图片描述"></p><h2 id="气泡实现解析"><a href="#气泡实现解析" class="headerlink" title="气泡实现解析"></a>气泡实现解析</h2><p><img src="https://img-blog.csdnimg.cn/20200219144131970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=,size_66,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>先通过上面的解析计算出各个点的位置，然后开始画出路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> tan = Math.abs(fixedP.y - dragP.y) / Math.abs(fixedP.x - dragP.x);</span><br><span class="line">mRadian = Math.atan(tan);</span><br><span class="line"><span class="keyword">float</span> fixedXOffset = (<span class="keyword">float</span>) (fixedR * Math.sin(mRadian));</span><br><span class="line"><span class="keyword">float</span> fixedYOffset = (<span class="keyword">float</span>) (fixedR * Math.cos(mRadian));</span><br><span class="line"><span class="keyword">float</span> dragXOffset = (<span class="keyword">float</span>) (dragR * Math.sin(mRadian));</span><br><span class="line"><span class="keyword">float</span> fdragYOffset = (<span class="keyword">float</span>) (dragR * Math.cos(mRadian));</span><br><span class="line"></span><br><span class="line">fixedP1 = <span class="keyword">new</span> PointF(fixedP.x - fixedXOffset, fixedP.y - fixedYOffset);</span><br><span class="line">fixedP2 = <span class="keyword">new</span> PointF(fixedP.x + fixedXOffset, fixedP.y + fixedYOffset);</span><br><span class="line">dragP1 = <span class="keyword">new</span> PointF(dragP.x - dragXOffset, dragP.y - fdragYOffset);</span><br><span class="line">dragP2 = <span class="keyword">new</span> PointF(dragP.x + dragXOffset, dragP.y + fdragYOffset);</span><br><span class="line">controlP = <span class="keyword">new</span> PointF((fixedP.x + dragP.x) / <span class="number">2</span>, (fixedP.y + dragP.y) / <span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">canvas.drawCircle(fixedP.x, fixedP.y, fixedR, mPaint);</span><br><span class="line">canvas.drawCircle(dragP.x, dragP.y, dragR, mPaint);</span><br><span class="line"></span><br><span class="line">canvas.drawLine(fixedP.x, fixedP.y, dragP.x, dragP.y, mPaint);</span><br><span class="line"></span><br><span class="line">Path path = <span class="keyword">new</span> Path();</span><br><span class="line">path.moveTo(fixedP1.x, fixedP1.y);</span><br><span class="line">path.quadTo(controlP.x, controlP.y, dragP1.x, dragP1.y);</span><br><span class="line">path.lineTo(dragP2.x, dragP2.y);</span><br><span class="line">path.quadTo(controlP.x, controlP.y, fixedP2.x, fixedP2.y);</span><br><span class="line">path.lineTo(fixedP1.x, fixedP1.y);</span><br><span class="line">canvas.drawPath(path, mPaint);</span><br></pre></td></tr></table></figure><p>要画实心的图形，改一下画笔样式就可以了</p><p><em>效果图</em><br><img src="https://img-blog.csdnimg.cn/20200219144906235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200219144919329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><a href="https://github.com/wxfjava/Struggle/blob/master/app/src/main/java/com/wxfjava/struggle/view/bubble/DemoView.java" target="_blank" rel="noopener">查看源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/w695050167/article/details/104392108&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;很久之前就看到过实现原理了，就是没有动手去实现一下。最近又看到了贝塞尔曲线相关的文章，于是决定着手写一个小demo。有什么不完善的地方，欢迎大家指正。谢谢！&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android Studio，Intellij更改滑动条颜色》--Monokai_2自定义配色中木得更改，显示为白色难受</title>
    <link href="http://www.wxfjava.com/2020/01/03/2020/android_studio_bug/"/>
    <id>http://www.wxfjava.com/2020/01/03/2020/android_studio_bug/</id>
    <published>2020-01-03T03:41:09.000Z</published>
    <updated>2020-05-09T17:11:02.450Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/w695050167/article/details/103817723" target="_blank" rel="noopener">原文地址</a></p><a id="more"></a><p><em>修改之前</em><br><img src="https://img-blog.csdnimg.cn/20200103113517301.png" alt="在这里插入图片描述"><br><em>修改之后</em><br><img src="https://img-blog.csdnimg.cn/20200103113551430.png" alt="在这里插入图片描述"><br><em>配色代码</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 背景颜色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"ScrollBar.Mac.trackColor"</span> <span class="attr">value</span>=<span class="string">"282c34"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 滑块颜色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"ScrollBar.Mac.thumbColor"</span> <span class="attr">value</span>=<span class="string">"545758"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 鼠标移动到控件上边框颜色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"ScrollBar.Mac.hoverThumbBorderColor"</span> <span class="attr">value</span>=<span class="string">"5B5E5F"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"ScrollBar.Mac.hoverThumbColor"</span> <span class="attr">value</span>=<span class="string">"5B5E5F"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"ScrollBar.Mac.hoverTrackColor"</span> <span class="attr">value</span>=<span class="string">"282c34"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>具体配置还是参考官网说明</strong><br><a href="http://www.jetbrains.org/intellij/sdk/docs/reference_guide/ui_themes/themes_extras.html#customizing-editor-scroll-bar-colors" target="_blank" rel="noopener">customizing-editor-scroll-bar-colors</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/w695050167/article/details/103817723&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.wxfjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《Java JDK1.8新特性》---Lambda表达式</title>
    <link href="http://www.wxfjava.com/2019/12/25/2019/lambda/"/>
    <id>http://www.wxfjava.com/2019/12/25/2019/lambda/</id>
    <published>2019-12-25T03:20:50.000Z</published>
    <updated>2020-05-09T17:11:02.440Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/w695050167/article/details/103695109" target="_blank" rel="noopener">原文地址</a></p><p>刚开始看到这个的时候，觉得这是啥啊？根本就不是java了嘛。不要学这个，我要写正宗java代码。看着就别扭。真正接触之后，真香！！！<br>下面的叙述都是个人理解，简单表达。有错误的地方还请指正。<br><a id="more"></a></p><h2 id="“-gt-”的使用"><a href="#“-gt-”的使用" class="headerlink" title="“-&gt;”的使用"></a>“-&gt;”的使用</h2><h3 id="1-没有参数的使用方法"><a href="#1-没有参数的使用方法" class="headerlink" title="1.没有参数的使用方法"></a>1.没有参数的使用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// () -&gt; &#123;&#125; 简直不要太方便,一句话搞定.</span></span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getId());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20191225105548949.png" alt="运行结果"></p><h3 id="2-有参数的使用方法"><a href="#2-有参数的使用方法" class="headerlink" title="2.有参数的使用方法"></a>2.有参数的使用方法</h3><p>x -&gt;  System.out.println(x)<br>(x) -&gt; {System.out.println(x);}<br>上面两种方法都是只有一个参数的时候。多个也比较简单。</p><p>(x, y) -&gt;  System.out.println(x + y)</p><p><em>注意如果有返回值，一句话的话可以直接是最后结果返回值。如果是代码块则需要带有return返回对应类型</em></p><p><strong>引用W3C</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/w695050167/article/details/103695109&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;刚开始看到这个的时候，觉得这是啥啊？根本就不是java了嘛。不要学这个，我要写正宗java代码。看着就别扭。真正接触之后，真香！！！&lt;br&gt;下面的叙述都是个人理解，简单表达。有错误的地方还请指正。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.wxfjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《Android 抓包工具》 --- tcpdump</title>
    <link href="http://www.wxfjava.com/2019/08/26/2019/tcp_dump/"/>
    <id>http://www.wxfjava.com/2019/08/26/2019/tcp_dump/</id>
    <published>2019-08-26T10:06:20.000Z</published>
    <updated>2020-05-09T17:11:02.440Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/w695050167/article/details/100083069" target="_blank" rel="noopener">原文地址</a></p><p><strong>准备环境</strong></p><p>1.需要抓包的手机要有ROOT权限<br>2.<a href="https://www.androidtcpdump.com/android-tcpdump/downloads" target="_blank" rel="noopener">下载tcpdump</a> 并推到手机内/data/local/tcpdump<br>3.修改文件权限添加可执行adb shell chmod a+x /data/local/tcpdump<br>4.执行命令抓包<br>./tcpdump -i any -p -s 0 -w /sdcard/capture.pcap<br><a id="more"></a></p><p><strong>查看包数据</strong><br>1.将抓到的包文件capture.pcap拉到电脑内。<br>2.用wireshark即可打开该文件。</p><p><strong>关于tcpdump</strong></p><p><em>1.语法</em></p><blockquote><p>tcpdump [-adeflnNOpqStvx][-c&lt;数据包数目&gt;][-dd][-ddd][-F&lt;表达文件&gt;][-i&lt;网络界面&gt;][-r&lt;数据包文件&gt;][-s&lt;数据包大小&gt;][-tt][-T&lt;数据包类型&gt;][-vv][-w&lt;数据包文件&gt;][输出数据栏位]</p></blockquote><p><em>2.参数说明</em></p><pre><code>-a 尝试将网络和广播地址转换成名称。-c&lt;数据包数目&gt; 收到指定的数据包数目后，就停止进行倾倒操作。-d 把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出。-dd 把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出。-ddd 把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出。-e 在每列倾倒资料上显示连接层级的文件头。-f 用数字显示网际网络地址。-F&lt;表达文件&gt; 指定内含表达方式的文件。-i&lt;网络界面&gt; 使用指定的网络截面送出数据包。-l 使用标准输出列的缓冲区。-n 不把主机的网络地址转换成名字。-N 不列出域名。-O 不将数据包编码最佳化。-p 不让网络界面进入混杂模式。-q 快速输出，仅列出少数的传输协议信息。-r&lt;数据包文件&gt; 从指定的文件读取数据包数据。-s&lt;数据包大小&gt; 设置每个数据包的大小。-S 用绝对而非相对数值列出TCP关联数。-t 在每列倾倒资料上不显示时间戳记。-tt 在每列倾倒资料上显示未经格式化的时间戳记。-T&lt;数据包类型&gt; 强制将表达方式所指定的数据包转译成设置的数据包类型。-v 详细显示指令执行过程。-vv 更详细显示指令执行过程。-x 用十六进制字码列出数据包资料。-w&lt;数据包文件&gt; 把数据包数据写入指定的文件。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/w695050167/article/details/100083069&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准备环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.需要抓包的手机要有ROOT权限&lt;br&gt;2.&lt;a href=&quot;https://www.androidtcpdump.com/android-tcpdump/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载tcpdump&lt;/a&gt; 并推到手机内/data/local/tcpdump&lt;br&gt;3.修改文件权限添加可执行adb shell chmod a+x /data/local/tcpdump&lt;br&gt;4.执行命令抓包&lt;br&gt;./tcpdump -i any -p -s 0 -w /sdcard/capture.pcap&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android-Java 巧用16进制进行属性设置》 ----方便Boolean属性复制</title>
    <link href="http://www.wxfjava.com/2019/06/10/2019/property_boolean/"/>
    <id>http://www.wxfjava.com/2019/06/10/2019/property_boolean/</id>
    <published>2019-06-10T11:11:25.000Z</published>
    <updated>2020-05-09T17:11:02.440Z</updated>
    
    <content type="html"><![CDATA[<p><strong>方便Boolean属性复制</strong></p><p><em>代码摘自  android.view.accessibility.AccessibilityNodeInfo</em><br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//*****************************************************</span></span><br><span class="line"><span class="comment">// Boolean attributes.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_CHECKABLE = <span class="number">0x00000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_CHECKED = <span class="number">0x00000002</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_FOCUSABLE = <span class="number">0x00000004</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_FOCUSED = <span class="number">0x00000008</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_SELECTED = <span class="number">0x00000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_CLICKABLE = <span class="number">0x00000020</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_LONG_CLICKABLE = <span class="number">0x00000040</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_ENABLED = <span class="number">0x00000080</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_PASSWORD = <span class="number">0x00000100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_SCROLLABLE = <span class="number">0x00000200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_ACCESSIBILITY_FOCUSED = <span class="number">0x00000400</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_VISIBLE_TO_USER = <span class="number">0x00000800</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_EDITABLE = <span class="number">0x00001000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOOLEAN_PROPERTY_OPENS_POPUP = <span class="number">0x00002000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the value of a boolean property.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> property The property.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">getBooleanProperty</span><span class="params">(<span class="keyword">int</span> property)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (mBooleanProperties &amp; property) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets a boolean property.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> property The property.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value The value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException If called from an AccessibilityService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBooleanProperty</span><span class="params">(<span class="keyword">int</span> property, <span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">    enforceNotSealed();</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        mBooleanProperties |= property;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mBooleanProperties &amp;= ~property;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets whether this node is checkable.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> True if the node is checkable.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCheckable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getBooleanProperty(BOOLEAN_PROPERTY_CHECKABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets whether this node is checkable.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;strong&gt;Note:&lt;/strong&gt; Cannot be called from an</span></span><br><span class="line"><span class="comment"> *   &#123;<span class="doctag">@link</span> android.accessibilityservice.AccessibilityService&#125;.</span></span><br><span class="line"><span class="comment"> *   This class is made immutable before being delivered to an AccessibilityService.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> checkable True if the node is checkable.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException If called from an AccessibilityService.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCheckable</span><span class="params">(<span class="keyword">boolean</span> checkable)</span> </span>&#123;</span><br><span class="line">    setBooleanProperty(BOOLEAN_PROPERTY_CHECKABLE, checkable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;方便Boolean属性复制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;代码摘自  android.view.accessibility.AccessibilityNodeInfo&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android-adb 自动化可能会用的几个命令》</title>
    <link href="http://www.wxfjava.com/2019/04/12/2019/adb_shell/"/>
    <id>http://www.wxfjava.com/2019/04/12/2019/adb_shell/</id>
    <published>2019-04-12T07:59:58.000Z</published>
    <updated>2020-05-09T17:11:02.430Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>1. adb shell打开关闭wifi</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打开wifi</span></span><br><span class="line">adb shell svc wifi enable </span><br><span class="line"><span class="meta">#</span><span class="bash">关闭wifi</span></span><br><span class="line">adb shell svc wifi disable</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>2.adb shell打开关闭数据data</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打开数据网络</span></span><br><span class="line">adb shell svc data enable</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭数据网络</span></span><br><span class="line">adb shell svc data disable</span><br></pre></td></tr></table></figure><p><strong>3.adb shell 打开USB模式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置为adb模式</span></span><br><span class="line">adb shell svc usb setFunction adb</span><br><span class="line"><span class="meta">#</span><span class="bash">设置为mtp模式</span></span><br><span class="line">shell svc usb setFunction mtp</span><br></pre></td></tr></table></figure><p><strong>4.设置屏幕常亮</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell svc power stayon true</span><br></pre></td></tr></table></figure><p><strong>5.清除应用用户数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm clear xxx</span><br><span class="line">xxx:包名</span><br></pre></td></tr></table></figure><p><em>其他ADB命令相关博文</em><br><a href="https://blog.csdn.net/good123_2014/article/details/79107765" target="_blank" rel="noopener">1.adb shell input查看此处</a><br><a href="https://blog.csdn.net/jinlu7611/article/details/50550556" target="_blank" rel="noopener">2.Adb Shell 下content使用</a><br><a href="https://blog.csdn.net/c1063891514/article/details/79118243" target="_blank" rel="noopener">3.adb命令大全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;1. adb shell打开关闭wifi&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;打开wifi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell svc wifi enable &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;关闭wifi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;adb shell svc wifi disable&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android 重新挂载/system目录》</title>
    <link href="http://www.wxfjava.com/2019/01/11/2019/remount_system/"/>
    <id>http://www.wxfjava.com/2019/01/11/2019/remount_system/</id>
    <published>2019-01-11T08:32:49.000Z</published>
    <updated>2020-05-09T17:11:02.440Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw /system</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mount -o remount,rw /system&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《力扣算法练习》---毕业之后就没搞过算法了，看了下蛮有意思</title>
    <link href="http://www.wxfjava.com/2018/12/21/2018/leetcode/"/>
    <id>http://www.wxfjava.com/2018/12/21/2018/leetcode/</id>
    <published>2018-12-21T10:47:21.000Z</published>
    <updated>2020-05-09T17:11:02.420Z</updated>
    
    <content type="html"><![CDATA[<p>官方网址 <a href="https://leetcode-cn.com/" target="_blank" rel="noopener">https://leetcode-cn.com/</a><br><a id="more"></a></p><p>现在才发现原来我比较喜欢算法类的，有技术性的工作。前段时间搞滑块验证码，感觉很有感觉。以后还是多多看看类似的东西。</p><p>将自己写的代码都已提交到github欢迎讨论 <a href="https://github.com/wxfjava/LeetCodeDemo" target="_blank" rel="noopener">力扣Demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方网址 &lt;a href=&quot;https://leetcode-cn.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://www.wxfjava.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《Android-简单封装一个小的Log工具》</title>
    <link href="http://www.wxfjava.com/2018/11/01/2018/log_utils/"/>
    <id>http://www.wxfjava.com/2018/11/01/2018/log_utils/</id>
    <published>2018-11-01T03:12:51.000Z</published>
    <updated>2020-05-09T17:11:02.430Z</updated>
    
    <content type="html"><![CDATA[<p>方便快速定位日志输出位置。<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">L</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"[TS]"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CALLER_LOCATION = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_STACK_TRACE_LENGTH = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        String message = getCaller(msg);</span><br><span class="line">        Log.i(TAG, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getCaller</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        StackTraceElement stackTrace[] = Thread.currentThread().getStackTrace();</span><br><span class="line">        <span class="keyword">if</span> (stackTrace.length &lt; MIN_STACK_TRACE_LENGTH) &#123;</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StackTraceElement caller = stackTrace[CALLER_LOCATION];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"[%s]%s(%s:%d)"</span>, caller.getMethodName(), msg,</span><br><span class="line">                caller.getFileName(),</span><br><span class="line">                caller.getLineNumber());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出样式：<em>[TS]: [testRun]对这就是测试日志(Test.java:72)</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;方便快速定位日志输出位置。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
      <category term="Java" scheme="http://www.wxfjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《Android开发偶遇有趣算法问题》---获得地图方圆r米内的一个随机坐标点（求单位圆内随机点）</title>
    <link href="http://www.wxfjava.com/2018/10/11/2018/random_location/"/>
    <id>http://www.wxfjava.com/2018/10/11/2018/random_location/</id>
    <published>2018-10-11T11:02:37.000Z</published>
    <updated>2020-05-09T17:11:02.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实际解决问题"><a href="#实际解决问题" class="headerlink" title="实际解决问题"></a>实际解决问题</h2><p>高德地图，百度地图求方圆五米内的一个随机经纬度</p><a id="more"></a><p><strong>方案一</strong><br>随机产生(x,y)<br>$$x^{2}*y^{2} \le R^{2}$$<br>去除不在圆内的点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> LatLng <span class="title">getRandomLatLng</span><span class="params">(LatLng point)</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">double</span> cirx = point.latitude;</span><br><span class="line">    <span class="keyword">double</span> ciry = point.longitude;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">double</span> circleR = <span class="number">0.00025</span>;</span><br><span class="line">    <span class="keyword">double</span> r2 = Math.pow(circleR, <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> x = (random.nextInt(<span class="number">500</span>) * <span class="number">0.000001</span>) - circleR;</span><br><span class="line">    <span class="keyword">double</span> y = (random.nextInt(<span class="number">500</span>) * <span class="number">0.000001</span>) - circleR;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (r2 &gt; Math.pow(x, <span class="number">2</span>) + Math.pow(y, <span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LatLng(cirx + x, ciry + y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getRandomLatLng(point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方案二</strong><br>用极坐标的方法<br>$$x = r<em>sin(\theta)$$ $$y = r</em>sin(\theta)$$<br>其中 0 ⩽ r ⩽ R，0 ⩽ theta &lt; 360    t为0-1均匀分布产生的随机数，r=sqrt(t)∗R<br><em>如果单纯用极坐标的话，中间的点会比较密集所以对r添加一个开方因子<a href="https://wenku.baidu.com/view/de291225aaea998fcc220ef9.html" target="_blank" rel="noopener">具体证明</a></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> LatLng <span class="title">getRandomLatLng</span><span class="params">(LatLng point)</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">double</span> cirx = point.latitude;</span><br><span class="line">    <span class="keyword">double</span> ciry = point.longitude;</span><br><span class="line">    <span class="keyword">double</span> circleR = <span class="number">0.000250</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> r = Math.sqrt(Math.random()) * circleR;</span><br><span class="line">    <span class="keyword">double</span> theta = random.nextInt(<span class="number">3600000</span>) * <span class="number">0.0001</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> x = r * Math.sin(theta);</span><br><span class="line">    <span class="keyword">double</span> y = r * Math.cos(theta);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LatLng(cirx + x, ciry + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>纯极坐标</strong><br><img src="https://img-blog.csdn.net/20181011190025937?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70 =344x576" alt="在这里插入图片描述"></p><p><strong>添加随机因子</strong><br><img src="https://img-blog.csdn.net/20181011190141254?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70 =344x576" alt="在这里插入图片描述"></p><p><strong>方案三</strong><br>$$x^{2}*y^{2} = R^{2}$$<br>根据该公式先确定一个x，然后解出y的范围，添加一个随机因子就可以了。<br>该方案的弊端是会使y（或者x看确定的哪个）两端的点变得很密集。不能够平均的分布</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> LatLng <span class="title">getRandomLatLng</span><span class="params">(LatLng point)</span> </span>&#123;</span><br><span class="line">   Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">double</span> cirx = point.latitude;</span><br><span class="line">    <span class="keyword">double</span> ciry = point.longitude;</span><br><span class="line">    <span class="keyword">double</span> circleR = <span class="number">0.000250</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> x = (random.nextInt(<span class="number">500</span>) * <span class="number">0.000001</span>) - circleR;</span><br><span class="line">    <span class="keyword">double</span> c = (random.nextInt(<span class="number">2000000</span>) * <span class="number">0.000001</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> y = c * Math.sqrt(circleR * circleR - x * x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LatLng(cirx + x, ciry + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/201810111856391?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70 =344x576" alt="在这里插入图片描述"></p><h2 id="什么，你说我的圆不够圆？"><a href="#什么，你说我的圆不够圆？" class="headerlink" title="什么，你说我的圆不够圆？"></a>什么，你说我的圆不够圆？</h2><p><strong>原因在这：</strong></p><pre><code>地球半径：6371000M地球周长：2 * 6371000M  * π = 40030173纬度38°地球周长：40030173 * cos38 = 31544206M任意地球经度周长：40030173M经度（东西方向）1M实际度：360°/31544206M=1.141255544679108e-5=0.00001141纬度（南北方向）1M实际度：360°/40030173M=8.993216192195822e-6=0.00000899经度（东西方向）100M实际度：0.00001141°* 100=0.001141°纬度（南北方向）100M实际度：0.00000899°* 100=0.000899°</code></pre><p><img src="https://img-blog.csdn.net/20181012191604417?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c2OTUwNTAxNjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70 =344x576" alt="在这里插入图片描述"></p><p><strong>这下就圆了</strong></p><p><a href="https://blog.csdn.net/w695050167/article/details/83017218" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实际解决问题&quot;&gt;&lt;a href=&quot;#实际解决问题&quot; class=&quot;headerlink&quot; title=&quot;实际解决问题&quot;&gt;&lt;/a&gt;实际解决问题&lt;/h2&gt;&lt;p&gt;高德地图，百度地图求方圆五米内的一个随机经纬度&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
      <category term="Java" scheme="http://www.wxfjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《Java---多线程交替打印1，2》</title>
    <link href="http://www.wxfjava.com/2018/08/17/2018/thread_test/"/>
    <id>http://www.wxfjava.com/2018/08/17/2018/thread_test/</id>
    <published>2018-08-17T10:47:53.000Z</published>
    <updated>2020-05-09T17:11:02.430Z</updated>
    
    <content type="html"><![CDATA[<p>1.这种方法可以再添加多个线程，定义好执行的顺序就可以了。唤醒的时候全部唤醒。不是当前线程执行时还说会休眠。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isFirst = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object lock;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">First</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lock = lock;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isFirst) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"1"</span>);</span><br><span class="line">                        isFirst = <span class="keyword">false</span>;</span><br><span class="line">                        lock.notify();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Second</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        Object lock;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Second</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lock = lock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!isFirst) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"2"</span>);</span><br><span class="line">                        isFirst = <span class="keyword">true</span>;</span><br><span class="line">                        lock.notify();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> First(lock)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Second(lock)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.这种方式只是此问题的另一只解法而已。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        notify();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                print(<span class="string">"A"</span> + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                print(<span class="string">"B"</span> + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main p = <span class="keyword">new</span> Main();</span><br><span class="line">        A a = p.<span class="keyword">new</span> A();</span><br><span class="line">        B b = p.<span class="keyword">new</span> B();</span><br><span class="line">        <span class="keyword">new</span> Thread(a).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(b).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.这种方法可以再添加多个线程，定义好执行的顺序就可以了。唤醒的时候全部唤醒。不是当前线程执行时还说会休眠。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.wxfjava.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《Android---handler小小优化问题》</title>
    <link href="http://www.wxfjava.com/2018/08/03/2018/optimize-handler/"/>
    <id>http://www.wxfjava.com/2018/08/03/2018/optimize-handler/</id>
    <published>2018-08-03T03:43:00.000Z</published>
    <updated>2020-05-09T17:11:02.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将-Handler-声明成静态内部类"><a href="#将-Handler-声明成静态内部类" class="headerlink" title="将 Handler 声明成静态内部类"></a>将 Handler 声明成静态内部类</h2><p>静态类不持有外部类的对象，所以 Activity 可以被正常的回收。但这个时候 Handler 无法操作 Activity 中的对象了，所以这个时候需要增加一个对 Activity 弱引用。代码如下：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Activity&gt; reference;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 持有 Activity 的弱引用</span></span><br><span class="line">        reference = <span class="keyword">new</span> WeakReference&lt;Activity&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        Activity activity = reference.get();</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span> &amp;&amp; !activity.isFinishing()) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="comment">// 处理消息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;将-Handler-声明成静态内部类&quot;&gt;&lt;a href=&quot;#将-Handler-声明成静态内部类&quot; class=&quot;headerlink&quot; title=&quot;将 Handler 声明成静态内部类&quot;&gt;&lt;/a&gt;将 Handler 声明成静态内部类&lt;/h2&gt;&lt;p&gt;静态类不持有外部类的对象，所以 Activity 可以被正常的回收。但这个时候 Handler 无法操作 Activity 中的对象了，所以这个时候需要增加一个对 Activity 弱引用。代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android----android中用到的设计模式》</title>
    <link href="http://www.wxfjava.com/2018/07/10/2018/android-design-mode/"/>
    <id>http://www.wxfjava.com/2018/07/10/2018/android-design-mode/</id>
    <published>2018-07-10T10:14:00.000Z</published>
    <updated>2020-05-09T17:11:02.420Z</updated>
    
    <content type="html"><![CDATA[<p><em>整理自网络文章</em></p><p><strong>1.单例模式</strong></p><ul><li>简介：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li><li>示例：Android中的系统级服务都是通过容器的单例模式实现方式，以单例形式存在，减少了资源消耗。<br>比如LayoutInflater Service，将这些服务以键值对的形式存储在一个HashMap容器中，用户使用时只需要根据key来获取到对应的ServiceFetcher，然后通过ServcieFetcher对象的getService函数来获取到具体的服务对象，第一次获取时会调用ServcieFetcher的createService函数创建服务对象，然后将该对象缓存到一个列表中，下次再取时直接从缓存中获取，避免重复创建对象，从而达到单例的效果。</li></ul><a id="more"></a><p><strong>2.抽象工厂模式</strong></p><ul><li>简介：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</li><li>示例：Android底层对MediaPlayer的创建。<br>MediaPlayerFactory是Android底层为了创建不同的MediaPlayer所定义的一个类。</li></ul><p><strong>3.工厂模式</strong></p><ul><li>简介：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。</li><li>示例：BitmapFactory位图工厂，专门用来将指定的图片转换为指定的位图Bitmap。</li></ul><p><strong>4.原型模式</strong></p><ul><li>简介：用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。</li><li>示例：比如我们需要一张Bitmap的几种不同格式：ARGB_8888、RGB_565、ARGB_4444、ALAPHA_8等。那我们就可以先创建一个ARGB_8888的Bitmap作为原型，在它的基础上，通过调用Bitmap.copy(Config)来创建出其它几种格式的Bitmap。另外一个例子就是Java中所有对象都有的一个名字叫clone的方法，已经原型模式的代名词了。在系统中要创建大量的对象，这些对象之间具有几乎完全相同的功能，只是在细节上有一点儿差别。</li></ul><p><strong>5.建造者模式</strong></p><ul><li>简介：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</li><li>示例：AlertDialog.Builder   ImageLoader的初始配置。</li></ul><p><strong>6.适配器模式</strong></p><ul><li>简介：将一个类的接口转换成客户希望的另外一个接口。</li><li>示例：不同的数据提供者使用一个适配器来向一个相同的客户提供服务。<br>ListView或GridView的Adapter。</li></ul><p><strong>7.桥接模式</strong></p><ul><li>简介：将抽象部分与它的实现部分分离，使它们都可以独立地变化。</li><li>示例：Window和WindowManager之间的关系。<br>在FrameWork中Window和PhoneWindow构成窗口的抽象部分，其中Window类为该抽象部分的抽象接口，PhoneWindow为抽象部分具体的实现及扩展。而WindowManager则为实现部分的基类，WindowManagerImpl则为实现部分具体的逻辑实现。</li></ul><p><strong>8.装饰模式</strong></p><ul><li>简介：动态地给一个对象添加一些额外的职责。就扩展功能而言， 它比生成子类方式更为灵活。</li><li>示例：Activity继承自ContextThemeWrapper，ContextThemeWrapper继承自ContextWrapper，ContextWrapper才是继承自Context。ContextWrapper就是我们找的装饰者。</li></ul><p><strong>9.组合模式</strong></p><ul><li>简介：将对象组合成树形结构以表示“部分-整体”的层次结构。</li><li>示例：View和ViewGroup的组合</li></ul><p><strong>10.外观模式</strong></p><ul><li>简介：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，统一编程接口。</li><li>示例：ContextImpl</li></ul><p><strong>11.享元模式</strong></p><ul><li>简介：运用共享技术有效地支持大量细粒度的对象。</li><li>示例：Message.obtainMessage通过重用Message对象来避免大量的Message对象被频繁的创建和销毁。</li></ul><p><strong>12.代理模式</strong></p><ul><li>简介：为其他对象提供一个代理以控制对这个对象的访问。</li><li>示例：所有的AIDL都一个代理模式的例子。假设一个Activity A去绑定一个Service S，那么A调用S中的每一个方法其实都是通过系统的Binder机制的中转，然后调用S中的对应方法来做到的。Binder机制就起到了代理的作用。</li></ul><p><strong>13.观察者模式</strong></p><ul><li>简介：一个对象发生改变时，所有信赖于它的对象自动做相应改变。</li><li>示例：我们可以通过BaseAdapter.registerDataSetObserver和BaseAdapter.unregisterDataSetObserver两方法来向BaseAdater注册、注销一个DataSetObserver。这个过程中，DataSetObserver就是一个观察者，它一旦发现BaseAdapter内部数据有变量，就会通过回调方法DataSetObserver.onChanged和DataSetObserver.onInvalidated来通知DataSetObserver的实现类。事件通知也是观察者模式。</li></ul><p><strong>14.中介者模式</strong></p><ul><li>简介：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li><li>示例：Binder机制。</li></ul><p><strong>15.访问者模式</strong></p><ul><li>简介：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li><li>示例：编译时注解中的ElementVisitor中定义多个Visit接口，每个接口处理一种数据类型，这就是典型的访问者模式，访问者模式正好解决了数据结构和数据操作分离的问题，避免某些操作污染了数据对象类。</li></ul><p><strong>16.解释器模式</strong></p><ul><li>简介：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</li><li>示例：PackageParser这个类对AndroidManifest.xml这个配置文件的解析过程，</li></ul><p><strong>17.迭代器模式</strong></p><ul><li>简介：提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。</li><li>示例：在Android中除了各种数据结构体，如List，Map，等包含的迭代器以外，Android源码中也提供了迭代器遍历模式，比如数据库查询使用Cursor，当我们使用SQLiteDataBase的query方法查询数据库时，会返回一个Cursor游标对象，该游标对象实际上就是一个具体的迭代器。</li></ul><p><strong>18.备忘录模式</strong></p><ul><li>简介：不需要了解对象的内部结构的情况下备份对象的状态，方便以后恢复。</li><li>示例：Activity的onSaveInstanceState和onRestoreInstanceState就是通过Bundle这种序列化的数据结构来存储Activity的状态，至于其中存储的数据结构，这两个方法不用关心。</li></ul><p><strong>19.责任链模式</strong></p><ul><li>简介：有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。</li><li>示例:  责任链模式在Android源码中比较类似的实现莫过于对事件的分发处理，每当用户接触屏幕时候，Android都会将对应的事件包装成一个事件对象从ViewTree的顶部至上而下的分发传递。ViewGroup事件投递的递归调用就类似一条责任链，一旦寻找到责任者，那么就由责任者持有并消费该次事件，具体的体现在View的onTouchEvent方法中的返回值，如果OnTouchEvent返回false，那么意味着当前View不会是该次事件的责任人，将不会对该事件持有。</li></ul><p><strong>20.状态模式</strong></p><ul><li>简介：状态发生改变时，行为改变。</li><li>示例：View.onVisibilityChanged方法，就是提供了一个状态模式的实现，允许在View的visibility发生改变时，引发执行onVisibilityChanged方法中的动作。</li></ul><p><strong>21.策略模式</strong></p><ul><li>简介：定义了一系列封装了算法、行为的对象，他们可以相互替换。</li><li>示例：Java.util.List就是定义了一个增（add）、删（remove）、改（set）、查（indexOf）策略，至于实现这个策略的ArrayList、LinkedList等类，只是在具体实现时采用了不同的算法。但因为它们策略一样，不考虑速度的情况下，使用时完全可以互相替换使用。</li></ul><p><strong>22.命令模式</strong></p><ul><li>简介：把请求封装成一个对象发送出去，方便定制、排队、取消。</li><li>示例：Handler.post后Handler.handleMessage。</li></ul><p><strong>23.享元模式</strong></p><ul><li>简介：运用共享技术有效地支持大量细粒度的对象。</li><li>示例：Message.obtainMessage通过重用Message对象来避免大量的Message对象被频繁的创建和销毁。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;整理自网络文章&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.单例模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简介：保证一个类仅有一个实例，并提供一个访问它的全局访问点。&lt;/li&gt;
&lt;li&gt;示例：Android中的系统级服务都是通过容器的单例模式实现方式，以单例形式存在，减少了资源消耗。&lt;br&gt;比如LayoutInflater Service，将这些服务以键值对的形式存储在一个HashMap容器中，用户使用时只需要根据key来获取到对应的ServiceFetcher，然后通过ServcieFetcher对象的getService函数来获取到具体的服务对象，第一次获取时会调用ServcieFetcher的createService函数创建服务对象，然后将该对象缓存到一个列表中，下次再取时直接从缓存中获取，避免重复创建对象，从而达到单例的效果。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android-用aapt获取package name和launch activity》</title>
    <link href="http://www.wxfjava.com/2018/06/26/2018/android-appt/"/>
    <id>http://www.wxfjava.com/2018/06/26/2018/android-appt/</id>
    <published>2018-06-26T08:40:00.000Z</published>
    <updated>2020-05-09T17:11:02.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用aapt获取package-name和launch-activity"><a href="#使用aapt获取package-name和launch-activity" class="headerlink" title="使用aapt获取package name和launch activity"></a>使用aapt获取package name和launch activity</h1><p><strong>工具位置：sdk/build-tools/{version}/aapt</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aapt dump badging /xxx/xxx.apk</span><br></pre></td></tr></table></figure><p>appt功能强大，打包解包轻轻松松。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用aapt获取package-name和launch-activity&quot;&gt;&lt;a href=&quot;#使用aapt获取package-name和launch-activity&quot; class=&quot;headerlink&quot; title=&quot;使用aapt获取package name和launch activity&quot;&gt;&lt;/a&gt;使用aapt获取package name和launch activity&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;工具位置：sdk/build-tools/{version}/aapt&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;aapt dump badging /xxx/xxx.apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;appt功能强大，打包解包轻轻松松。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.wxfjava.com/tags/Android/"/>
    
  </entry>
  
</feed>
